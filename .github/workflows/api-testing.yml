name: API Testing with Keploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm test -- --coverage --watchAll=false
      
    - name: Install Keploy
      run: |
        curl -s https://raw.githubusercontent.com/keploy/keploy/main/install.sh | bash
        echo "$HOME/.keploy/bin" >> $GITHUB_PATH
        
    - name: Verify Keploy installation
      run: keploy --version
      
    - name: Run Keploy API tests
      run: |
        mkdir -p keploy-reports
        keploy test --config keploy.yaml
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: keploy-test-results
        path: |
          keploy-reports/
          .keploy/
        retention-days: 30
        
    - name: Generate test report
      run: |
        echo "<html><body><h1>Keploy API Test Results</h1>" > keploy-report.html
        echo "<p>Test run completed at $(date)</p>" >> keploy-report.html
        echo "<p>‚úÖ API tests completed successfully</p>" >> keploy-report.html
        echo "<p>üìä Check the uploaded artifacts for detailed results.</p>" >> keploy-report.html
        echo "</body></html>" >> keploy-report.html
        
    - name: Upload test report
      uses: actions/upload-artifact@v4
      with:
        name: keploy-report
        path: keploy-report.html

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 30

  # Manual API Testing with cURL
  manual-api-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test GET /items endpoint
      run: |
        curl -X GET "https://ldtelowagnfxcphzssuq.supabase.co/rest/v1/items?order=created_at.desc" \
          -H "apikey: ${{ secrets.SUPABASE_API_KEY }}" \
          -H "Authorization: Bearer ${{ secrets.SUPABASE_API_KEY }}" \
          -w "\nHTTP Status: %{http_code}\n" \
          -o /dev/null
          
    - name: Test POST /items endpoint
      run: |
        RESPONSE=$(curl -X POST "https://ldtelowagnfxcphzssuq.supabase.co/rest/v1/items" \
          -H "apikey: ${{ secrets.SUPABASE_API_KEY }}" \
          -H "Authorization: Bearer ${{ secrets.SUPABASE_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"name": "GitHub Actions Test Item", "description": "Created via CI/CD"}' \
          -w "\nHTTP Status: %{http_code}" \
          -s)
        
        echo "Response: $RESPONSE"
        
        # Extract the item ID for cleanup
        ITEM_ID=$(echo "$RESPONSE" | grep -o '"id":"[^"]*"' | cut -d'"' -f4)
        echo "ITEM_ID=$ITEM_ID" >> $GITHUB_ENV
        
    - name: Test PATCH /items endpoint
      run: |
        if [ ! -z "$ITEM_ID" ]; then
          curl -X PATCH "https://ldtelowagnfxcphzssuq.supabase.co/rest/v1/items?id=eq.$ITEM_ID" \
            -H "apikey: ${{ secrets.SUPABASE_API_KEY }}" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"name": "Updated GitHub Actions Test Item"}' \
            -w "\nHTTP Status: %{http_code}\n"
        fi
        
    - name: Test DELETE /items endpoint
      run: |
        if [ ! -z "$ITEM_ID" ]; then
          curl -X DELETE "https://ldtelowagnfxcphzssuq.supabase.co/rest/v1/items?id=eq.$ITEM_ID" \
            -H "apikey: ${{ secrets.SUPABASE_API_KEY }}" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_API_KEY }}" \
            -w "\nHTTP Status: %{http_code}\n"
        fi
        
    - name: Test error handling
      run: |
        # Test with invalid API key
        curl -X GET "https://ldtelowagnfxcphzssuq.supabase.co/rest/v1/items" \
          -H "apikey: invalid_key" \
          -w "\nHTTP Status: %{http_code}\n" \
          -o /dev/null

  # Build and Deploy
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test, manual-api-test, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 30

  # Notifications
  notify:
    runs-on: ubuntu-latest
    needs: [test, manual-api-test, build-and-deploy]
    if: always()
    
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "‚úÖ All tests passed! API testing completed successfully."
        echo "üìä Test coverage and API test results available in artifacts."
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Some tests failed. Please check the logs for details."
        echo "üîç Review the test artifacts for more information." 